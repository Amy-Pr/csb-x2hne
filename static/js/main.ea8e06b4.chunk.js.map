{"version":3,"sources":["Header.js","Note.js","NoteList.js","App.js","index.js"],"names":["Header","props","react_default","a","createElement","className","onClick","addNoteProps","type","placeholder","value","searchTextProps","onChange","onSearchProps","Note","note","title","event","updatedValue","target","editMeId","id","onType","description","removeNote","NoteList","noteElements","notesProps","filter","noteObj","doesMatchSearch","map","src_Note","key","App","_Component","Object","inherits","_super","_createSuper","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","call","apply","concat","state","notes","Date","now","searchText","addNote","newNoteArray","toConsumableArray","setState","console","log","clickedNote","updatedNotes","updatedKey","onSearch","e","toLowerCase","titleMatch","includes","descriptionMatch","createClass","savedNotesString","localStorage","getItem","savedNotes","JSON","parse","stringify","setItem","src_Header","src_NoteList","Component","rootElement","document","getElementById","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.ea8e06b4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = (props) => (\r\n  <header>\r\n    <h1 className=\"app-header__title\">Super Sticky Notes</h1>\r\n    <aside className=\"app-header__controls\">\r\n      <button className=\"add-new\" onClick={props.addNoteProps}>\r\n        + New Note\r\n      </button>\r\n      <input\r\n        type=\"\"\r\n        className=\"search\"\r\n        placeholder=\"Type here to search...\"\r\n        value={props.searchTextProps}\r\n        onChange={props.onSearchProps}\r\n      />\r\n    </aside>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Note = (props) => {\r\n  const updateTitle = (event) => {\r\n    const updatedValue = event.target.value; //interrogate the event (What's this event? Oh a value was typed!) and save it to a variable\r\n    const editMeId = props.note.id;\r\n    props.onType(editMeId, \"title\", updatedValue); //we just called the onType function from App and fed it specific parameters\r\n  };\r\n\r\n  const updateDescription = (event) => {\r\n    const updatedValue = event.target.value;\r\n    const editMeId = props.note.id;\r\n    props.onType(editMeId, \"description\", updatedValue);\r\n  };\r\n\r\n  const clickDelete = () => {\r\n    props.removeNote(props.note.id);\r\n  };\r\n\r\n  return (\r\n    <li className=\"note\">\r\n      <input\r\n        value={props.note.title} //The \"note\" prop will be passed over to <Note /> in NoteList.js which sets note={noteObj}; Alternative: could also pass as \"props.title\" and set title={noteObj.title} in <Note />.\r\n        type=\"text\"\r\n        className=\"note__title\"\r\n        placeholder=\"Title\"\r\n        onChange={updateTitle}\r\n      />\r\n      <textarea\r\n        value={props.note.description}\r\n        className=\"note__description\"\r\n        placeholder=\"Description...\"\r\n        onChange={updateDescription}\r\n      />\r\n      <span onClick={clickDelete} className=\"note__delete hover\">\r\n        X\r\n      </span>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import React from \"react\";\r\nimport Note from \"./Note.js\";\r\n\r\n//Added props as a parameter and made it a function with the bracket.\r\nconst NoteList = (props) => {\r\n  //renderNote is a callback function. \"noteObj\" refers to each object in the array \"notes.\" We assigned \"key\" and \"note\" attributes in the component. Can call these anything, but need to match the prop passed from the Note component for it to work.\r\n  const renderNote = (noteObj) => (\r\n    <Note\r\n      note={noteObj}\r\n      key={noteObj.id}\r\n      onType={props.onType}\r\n      removeNote={props.removeNote}\r\n    />\r\n  );\r\n\r\n  //We took the \"notes\" array (passed as props from App) and produced a new array \"noteElements\" built of the\r\n  //values returned by calling renderNote callback function (above) on each of the original array items.\r\n  //We got this: const noteElements = props.notesProps.map(renderNote);\r\n\r\n  //Now we are writing a function to filter the notes array to just include search matches (doesMatchSearch) that are true and saving it to a new array.\r\n  const searchMatches = props.notesProps.filter(\r\n    (noteObj) => noteObj.doesMatchSearch\r\n  );\r\n  //now rewrite our noteElements array to map over searchMatches instead.\r\n  const noteElements = searchMatches.map(renderNote);\r\n\r\n  return (\r\n    <ul className=\"notes-list\">\r\n      {/*<Note />*/}\r\n      {/*<Note />*/}\r\n      {/*<Note />*/}\r\n      {noteElements}\r\n      {/*Individual <Note/> components replaced by the brand new array*/}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default NoteList;\r\n","import React, { Component } from \"react\";\nimport Header from \"./Header.js\";\nimport NoteList from \"./NoteList.js\";\n\nclass App extends Component {\n  state = {\n    notes: [\n      {\n        id: Date.now(),\n        title: \"\",\n        description: \"\",\n        doesMatchSearch: true\n      }\n    ],\n    searchText: \"\"\n  };\n\n  componentDidMount() {\n    const savedNotesString = localStorage.getItem(\"savedNotes\");\n    if (savedNotesString) {\n      const savedNotes = JSON.parse(savedNotesString);\n      //console.log(savedNotes);\n      this.setState({ notes: savedNotes });\n    }\n  }\n\n  componentDidUpdate() {\n    const savedNotesString = JSON.stringify(this.state.notes);\n    localStorage.setItem(\"savedNotes\", savedNotesString);\n  }\n\n  addNote = () => {\n    const newNote = {\n      id: Date.now(),\n      title: \"\",\n      description: \"\",\n      doesMatchSearch: true\n    };\n\n    const newNoteArray = [newNote, ...this.state.notes];\n    this.setState({ notes: newNoteArray });\n    console.log(newNoteArray);\n  };\n\n  removeNote = (clickedNote) => {\n    const filterCallback = (note) => note.id !== clickedNote; //Remember no brackets in ES6 for 1 expression function\n    const updatedNotes = this.state.notes.filter(filterCallback);\n    this.setState({ notes: updatedNotes });\n  };\n\n  //If I wrote the callback in ES5:\n  //function filterCallback (note) {\n  //return note.id !== clickedNote;\n  //};\n\n  onType = (editMeId, updatedKey, updatedValue) => {\n    /* this event handler updates sticky note text fields\n      - editMeId: the id of the note that the user typed in\n      - updatedKey: which field was edited? 'title' or 'description'\n      - updatedValue: new value of edited field */\n    const updateIdMatch = (note) => {\n      //This function is looking for the note with the *change* the event listener is listening for\n      if (note.id !== editMeId) {\n        //If this isn't the note with the change\n        return note; //then give me the note (stays in the array when mapped over later)\n      } else {\n        //If this is the note with the change\n        if (updatedKey === \"title\") {\n          //and if the key is \"title\" (specified in Note Component)\n          note.title = updatedValue; // then update the value (the value is specified in Note Component)\n          return note; //and give me the note\n        } else {\n          //if the key is not \"title\"\n          note.description = updatedValue; //then update the description value\n          return note; //and give me the note\n        }\n      }\n    };\n    const updatedNotes = this.state.notes.map(updateIdMatch); //for each object of notes array, run it through the updateIdMatch function, and build a new array made up of the return values of that function\n    this.setState({ notes: updatedNotes });\n  };\n\n  onSearch = (e) => {\n    /* toggle the doesMatchSearch boolean value of each sticky\n    note when the user types in the search field.\n    set the doesMatchSearch value to true for a sticky note if\n    it's title or description matches the search string. */\n    const searchText = e.target.value.toLowerCase();\n\n    const matchSearch = (note) => {\n      //alternative, can lose this function declaration and go straight to mapping as a function: const updatedNotes = this.state.notes.map((note) => {\n      const title = note.title.toLowerCase();\n      const description = note.description.toLowerCase();\n      const titleMatch = title.includes(searchText);\n      const descriptionMatch = description.includes(searchText);\n      //const hasMatch = titleMatch || descriptionMatch; //I don't know what this is.\n\n      if (!searchText) {\n        /* If the search field is empty, then\n      we set the doesMatchSearch value for every note to true. */\n        note.doesMatchSearch = true;\n        return note;\n      }\n      if (!titleMatch && !descriptionMatch) {\n        note.doesMatchSearch = false;\n        return note;\n      } else {\n        note.doesMatchSearch = true;\n        return note;\n      }\n    };\n    const updatedNotes = this.state.notes.map(matchSearch);\n    this.setState({\n      searchText: searchText, //setting this to the variable above (e.target.value) which corresponds to the value in the input element in Header.\n      notes: updatedNotes\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        {/*The addNoteProps attribute is important for the new note to render into JSX*/}\n        <Header\n          searchTextProps={this.state.searchText}\n          addNoteProps={this.addNote}\n          onSearchProps={this.onSearch}\n        />\n\n        {/*The ontType prop is being passed from the update functions in Note Component*/}\n        <NoteList\n          notesProps={this.state.notes}\n          onType={this.onType}\n          removeNote={this.removeNote}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport \"./index.css\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}